1、什么是动态代理

    动态代理，照我的理解就是，在不修改原有类对象方法的源代码基础上，通过代理对象实现原有类对象方法的增强，也就是拓展原有
    类对象的功能。

2、jdk动态代理和cglib动态代理区别
    代理模式：代理类和被代理类实现共同的接口（或继承），代理类中存有指向被代理类的索引，实际执行时通过调用代理类的方法、
    实际执行的是被代理类的方法。
    一、简单来说：

    　　JDK动态代理只能对实现了接口的类生成代理，而不能针对类

    　　CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法（继承）

    二、Spring在选择用JDK还是CGLiB的依据：

       (1)当Bean实现接口时，Spring就会用JDK的动态代理

       (2)当Bean没有实现接口时，Spring使用CGlib是实现

    　  (3)可以强制使用CGlib（在spring配置中加入<aop:aspectj-autoproxy proxy-target-class="true"/>）

    三、CGlib比JDK快？

    　 (1)使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，比使用Java反射效率要高。
        唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。

    　 (2)在对JDK动态代理与CGlib动态代理的代码实验中看，1W次执行下，JDK7及8的动态代理性能比CGlib要好20%左右。

3、java 获取反射常使用的三种方式：

    1.通过new对象实现反射机制
    Date date1 = new Date();
    Class c1 = date1.getClass();

    2.通过路径实现反射机制  使用Class.forName方法


    3.通过类名实现反射机制
List list = new ArrayList();
System.out.println(list.getClass().getName()); // java.util.ArrayList
这个方法可以直接获得与指定类关联的Class对象，而并不需要有该类的对象存在。
    1）使用场合

    在编译时根本无法知道该对象或类可能属于哪些类，程序只依靠运行时信息来发现该对象和类的真实信息。

    2）主要作用

    通过反射可以使程序代码访问装载到JVM 中的类的内部信息，获取已装载类的属性信息，获取已装载类的方法，获取已装载类的构造方法信息

    3）反射的优点

    反射提高了Java程序的灵活性和扩展性，降低耦合性，提高自适应能力。它允许程序创建和控制任何类的对象，无需提前硬编码目标类；反射是其它一些常用语言，如C、C++、Fortran 或者Pascal等都不具备的