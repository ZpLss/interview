Dubbo是阿里集团开源的一个极为出名的RPC框架

微服务的核心要素在于服务的发现、注册、路由、熔断、降级、分布式配置

1、核心部件：
dubbo：
    Provider： 暴露服务的提供方，可以通过jar或者容器的方式启动服务
    Consumer：调用远程服务的服务消费方。
    Registry： 服务注册中心和发现中心。
    Monitor： 统计服务和调用次数，调用时间监控中心。（dubbo的控制台页面中可以显示，目前只有一个简单版本）
    Container：服务运行的容器。

springcloud
    Service Provider： 暴露服务的提供方。
    Service Consumer：调用远程服务的服务消费方。
    EureKa Server： 服务注册中心和服务发现中心。

    从整体架构上来看，二者模式接近，都需要需要服务提供方，注册中心，服务消费方。

    从核心要素来看，Spring Cloud 更胜一筹，在开发过程中只要整合Spring Cloud的子项目就可以顺利的完成各种组件的融合，
而Dubbo缺需要通过实现各种Filter来做定制，开发成本以及技术难度略高。
2、通讯协议：
    Dubbo：dubbo使用RPC通讯协议，适合于小数据量大并发的服务调用
    Spring Cloud 使用HTTP协议的REST API

3、性能比较：
    点评：dubbo支持各种通信协议，而且消费方和服务方使用长链接方式交互，通信速度上略胜Spring Cloud，
    如果对于系统的响应时间有严格要求，长链接更合适。

4、服务依赖方式：

Dubbo：服务提供方与消费方通过接口的方式依赖，对程序无入侵。
Spring Cloud：服务提供方和服务消费方通过json方式交互，因此只需要定义好相关json字段即可，消费方和提供方无接口依赖。
通过注解方式来实现服务配置，对于程序有一定入侵。

点评：Dubbo服务依赖略重，需要有完善的版本管理机制，但是程序入侵少。而Spring Cloud通过Json交互，省略了版本管理的问题，
但是具体字段含义需要统一管理，自身Rest API方式交互，为跨平台调用奠定了基础。