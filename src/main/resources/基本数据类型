Java 基本数据按类型可以分为四大类：布尔型、整数型、浮点型、字符型，这四大类包含 8 种基本数据类型。

    布尔型：boolean
    整数型：byte、short、int、long
    浮点型：float、double
    字符型：char

包装类型
        我们知道 8 种基本数据类型都有其对应的包装类，因为 Java 的设计思想是万物既对象，有很多时候我们需要以对象的形式
    操作某项功能，比如说获取哈希值（hashCode）或获取类（getClass）等。
    除 char 的包装类 Character 和 int 的包装类 Integer 之外，其他基本数据类型的包装类只需要首字母大写即可。

    1. 功能丰富
    包装类本质上是一个对象，对象就包含有属性和方法，比如 hashCode、getClass 、max、min 等。

    2. 可定义泛型类型参数
    包装类可以定义泛型，而基本类型不行。
    比如使用 Integer 定义泛型，代码：
    List<Integer> list = new ArrayList<>();
    如果使用 int 定义就会报错，代码：
    List list = new ArrayList<>();  // 编译器代码报错

    3. 序列化
    因为包装类都实现了 Serializable 接口，所以包装类天然支持序列化和反序列化。

    4. 类型转换
    包装类提供了类型转换的方法，可以很方便的实现类型之间的转换，比如 Integer 类型转换代码：
    String age = "18";
    int ageInt = Integer.parseInt(age) + 2;

    5. 高频区间的数据缓存
    高频区域的数值会直接使用已有对象，非高频区域的数值会重新 new 一个新的对象。
    以 Integer 为例来说，在数值区间为 -128~127 时，会直接复用已有对象，在这区间之外的数字才会在堆上产生。

    各包装类高频区域的取值范围：
        Boolean：使用静态 final 定义，就会返回静态值
        Byte：缓存区 -128~127
        Short：缓存区 -128~127
        Character：缓存区 0~127
        Long：缓存区 -128~127
        Integer：缓存区 -128~127

包装类的注意事项

    1、int 的默认值是 0，而 Integer 的默认值是 null。
    2、推荐所有包装类对象之间的值比较使用 equals() 方法，因为包装类的非高频区数据会在堆上产生，而高频区又会复用已有对象，
    这样会导致同样的代码，因为取值的不同，而产生两种截然不同的结果。代码示例：
            Integer num3 = 128;
            Integer num4 = 128;
            System.out.println(num3 == num4);//false
            System.out.println(num3.equals(num4));//true

    3、Float 和 Double 不会有缓存，其他包装类都有缓存。

    4、Integer 是唯一一个可以修改缓存范围的包装类，在 VM optons 加入参数：
        -XX:AutoBoxCacheMax=666 即修改缓存最大值为 666 。



